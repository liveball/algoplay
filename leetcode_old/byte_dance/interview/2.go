package interview

//你被请来给一个要举办高尔夫比赛的树林砍树. 树林由一个非负的二维数组表示， 在这个数组中：
//
//0 表示障碍，无法触碰到.
//1 表示可以行走的地面.
//比1大的数 表示一颗允许走过的树的高度.
//你被要求按照树的高度从低向高砍掉所有的树，每砍过一颗树，树的高度变为1。
//
//你将从（0，0）点开始工作，你应该返回你砍完所有树需要走的最小步数。 如果你无法砍完所有的树，返回 -1 。
//
//可以保证的是，没有两棵树的高度是相同的，并且至少有一颗树需要你砍。
//
//示例 1:
//
//输入:
//[
//[1,2,3],
//[0,0,4],
//[7,6,5]
//]
//输出: 6
//
//
//示例 2:
//
//输入:
//[
//[1,2,3],
//[0,0,0],
//[7,6,5]
//]
//输出: -1
//
//
//示例 3:
//
//输入:
//[
//[2,3,4],
//[0,0,5],
//[8,7,6]
//]
//输出: 6
//
//解释: (0,0) 位置的树，你可以直接砍去，不用算步数

func cutOffTree(forest [][]int) int {

}

//罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
//
//字符          数值
//I             1
//V             5
//X             10
//L             50
//C             100
//D             500
//M             1000
//例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
//
//通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
//
//I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
//X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
//C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
//给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。
//
//示例 1:
//
//输入: 3
//输出: "III"

func intToRoman(num int) string {

}

//给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。
//
//
//
//在杨辉三角中，每个数是它左上方和右上方的数的和。
//
//示例:
//
//输入: 5
//输出:
//[
//[1],
//[1,1],
//[1,2,1],
//[1,3,3,1],
//[1,4,6,4,1]
//]

func generate(numRows int) [][]int {
   return [][]int{}
}